
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbt_project'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'snowflake'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
seed-paths: ["data"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_modules"

# Configuring vars

vars:
  min_orders: -1

on-run-start: "{{ insert_audits('run-start') }}" #"insert into learn.public.dbt_audits (audit_type) values ('run-start'); commit;"
on-run-end: "{{ insert_audits('run-end') }}" #"insert into learn.public.dbt_audits (audit_type) values ('run-end'); commit;"



# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  pre-hook: "{{ insert_audits('hook-start') }}" #"insert into learn.public.dbt_audits (audit_type) values ('model-start'); commit;"
  post-hook: "{{ insert_audits('hook-end') }}" #"insert into learn.public.dbt_audits (audit_type) values ('model-end'); commit;"

  dbt_project:
    # Config indicated by + and applies to all files under models/staging/
    staging:
      +materialized: view
      +schema: staging # not overriding -> PUBLIC_staging
      # example:
      #   +materialized: table #overriding previous conf